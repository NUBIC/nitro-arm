:css
  .hover {
    background-color: #888888;
  }
  #assigned_submissions ul li, #unassigned_submissions ul li {
    list-style: none;
    cursor: -moz-grab;
  }
  #assigned_submissions, #unassigned_submissions {
    border: none;
  }

.container-fluid
  .row
    .col-xs-8
      %h2 Reviewers
    .col-xs-4
      %h2 Unassigned Submissions
  .row
    .col-xs-8
      = render 'reviewers', reviewers: @reviewers, project: @project
    .col-xs-4
      #unassigned_submissions{style:'height:50px;'}
        .unassigned_submission_list
          - @unfilled_submissions.each do |item|
            .row.unassigned_submission{id: "submission_#{item.id}"}
              = "PI: #{item.applicant.name}; Title: #{truncate_words(item.submission_title, 20)}"

%h2 Add Reviewers #{netid_lookup_tag}
%p Enter a comma or space-separated list of usernames for the reviewers.
= form_for(:admin, :url => add_reviewers_project_admins_path(@project.id) ) do |f|
  = render('shared/error_messages', :object => f.object) if f.object && !f.object.try(:errors).blank?
  %p
    = f.label :reviewer_list, "List of usernames for new reviewers"
    %br
    = f.text_area :reviewer_list, {:rows => 10, :cols => 40, :wrap=>"virtual"}
  %p
    = f.submit 'Add reviewers'

:javascript
  jQuery('.unassigned_submission').draggable();
  jQuery('.unassigned_submission_list').droppable({
    hoverClass: 'hover',
    drop: function(event, ui) {
      submissionReviewID = jQuery(ui.draggable).attr('id').split('_').slice(-1)[0];

      if (confirm('This will delete the review you just moved. Are you OK with that?')) {
        jQuery.ajax({
          type: "POST",
          url: '/projects/' + "#{@project.id}" + '/admins/unassign_submission.js',
          data: { "submission_review_id": submissionReviewID },
          success: function(data) {
            window.location.href = '/projects/' + #{@project.id} + '/admins/reviewers';
          }
        });
      } else {
        location.reload();
      }
    }
  });
